#! /usr/bin/env bash

set -euo pipefail

REMUX_STATE_FILE=~/.local/share/remux.txt
[ -z "${REMUX_COMMANDS_TO_IGNORE+x}" ] && REMUX_COMMANDS_TO_IGNORE=("bash" "zsh" "fish" "tmux" "sh" "ssh")

function print_help() {
  printf "Usage: remux [(s)ave | (r)estore | (d)ump]\n"
  printf "Configuration environment variables:\n"
  printf "    - REMUX_COMMANDS_TO_IGNORE: A list of commands to ignore when restoring panes. Default: \"bash zsh fish tmux sh ssh\"\n"
}

function tmux_session_exists() {
  local session_name=${1}
  return $(tmux has-session -t ${session_name} &>/dev/null && echo 0 || echo 1)
}

function tmux_window_exists() {
  local session_name="$1"
  local window_index="$2"

  if tmux list-windows -t "${session_name}" | grep -q "^${window_index}:"; then
    return 0
  else
    return 1
  fi
}

function tmux_pane_exists() {
  local session_name="$1"
  local window_index="$2"
  local pane_index="$3"

  if tmux list-panes -t "${session_name}:${window_index}" | grep -q "^${pane_index}:"; then
    return 0
  else
    return 1
  fi
}

function tmux_display_message() {
  local message="$1"

  if tmux run 2>/dev/null; then
    tmux display-message "${message}" &>/dev/null
  fi
}

function save() {
  local tmux_state=$(tmux lsp -aF '#{session_name}>#{window_index}>#{window_name}>#{window_layout}>#{pane_index}>#{pane_current_command}>#{pane_current_path}')
  mkdir -p $(dirname "${REMUX_STATE_FILE}")
  printf "${tmux_state}" >"${REMUX_STATE_FILE}"
  tmux_display_message "Saved Tmux state."
}

function restore() {
  if [ ! -f "${REMUX_STATE_FILE}" ]; then
    echo "No remux save found"
    exit 1
  fi

  local remux_state=$(<"${REMUX_STATE_FILE}")

  if [ -z "${remux_state}" ]; then
    echo "No remux save found"
    exit 1
  fi

  tmux_display_message "Restoring Tmux state..."

  while IFS= read -r line; do
    local session_name=$(echo "$line" | cut -d'>' -f1)
    local window_index=$(echo "$line" | cut -d'>' -f2)
    local window_name=$(echo "$line" | cut -d'>' -f3)
    local window_layout=$(echo "$line" | cut -d'>' -f4)
    local pane_index=$(echo "$line" | cut -d'>' -f5)
    local pane_command=$(echo "$line" | cut -d'>' -f6 | grep -vE "$(
      IFS="|"
      echo "${REMUX_COMMANDS_TO_IGNORE[*]}"
    )")
    local pane_path=$(echo "$line" | cut -d'>' -f7)

    echo $pane_command

    if ! tmux_session_exists ${session_name}; then
      tmux new-session -d -s ${session_name}
    fi

    if ! tmux_window_exists ${session_name} ${window_index}; then
      tmux new-window -d -t ${session_name}:${window_index} -n ${window_name}
    fi

    if ! tmux_pane_exists ${session_name} ${window_index} ${pane_index}; then
      tmux split-window -d -t ${session_name}:${window_index} -c ${pane_path} -l 1 -v
      tmux select-layout -t ${session_name}:${window_index} ${window_layout}
    else
      tmux send-keys -t ${session_name}:${window_index}.${pane_index} "cd ${pane_path}" Enter c-l
    fi
    if [ -n "${pane_command}" ]; then
      tmux send-keys -t ${session_name}:${window_index}.${pane_index} "${pane_command}" Enter c-l
    fi
  done <<<"${remux_state}"
}

if [ "$#" -eq 0 ]; then
  print_help
  exit 1
fi

command=$1

case $command in
[sS] | save)
  save
  ;;
[rR] | restore)
  restore
  ;;
[dD] | dump)
  [[ -f "${REMUX_STATE_FILE}" ]] && cat "${REMUX_STATE_FILE}" || echo "No remux save found"
  ;;
*)
  print_help
  exit 1
  ;;
esac
